void fifo(struct task **taskArray, int numTask, struct resource **resourceArray, int numResourceType, int verboseFlag);
void runOneCycle(struct task **taskArray, int numTask, int *ptCycle, struct resource **resourceArray, int numResourceType, int *blockQ, int sizeQ, int verboseFlag);
int runInitiate(struct task *curTask, struct activity *curActivity, struct resource **resourceArray);
int runRequest(struct task *curTask, struct activity *curActivity, struct resource **resourceArray, int verboseFlag);
void runRelease(struct task *curTask, struct activity *curActivity, struct resource **resourceArray, int *ptCycle, struct resource **tempResoureArray, int verboseFlag);
int allTerminated(struct task **taskArray, int numTask);
void addToQ(struct task *curTask, int *blockQ, int sizeQ);
int deadlockDetection(struct resource **resourceArray, int numResourceType, struct task **taskArray, int numTask);
void helperRelease(struct task *curTask, int numResourceType, struct resource **resourceArray);
void shiftBlockQ(int *blockQ, int sizeQ);
void pendingRelease(struct resource **resourceArray, int numResourceType, struct task **taskArray, int numTask, int *blockQ, int sizeQ, int verboseFlag);
void printOutput(struct task **taskArray, int numTask, int cycle);
int abortProcess(struct task **taskArray, int numTask, struct resource **resourceArray, int numResourceType, int *blockQ, int sizeQ);
int requestHelper(struct task *curTask, struct activity *curActivity, struct resource **resourceArray);
void removeFromBlockQ(int taskId, int sizeQ, int *blockQ);
void checkWithFutureResource(struct task **taskArray, struct resource **resourceArray, int numResourceType, int* blockQ, int sizeQ);
void runCheckFirst(struct task **taskArray, int numTask, struct resource **resourceArray, int verboseFlag);
void bubbleSort(int iarr[][2], int num);
void banker(struct task **taskArray, int numTask, struct resource **resourceArray, int numResourceType, int **max, int verboseFlag);
void printMax(struct task **taskArray, int numTask, struct resource **resourceArray, int numResourceType, int **max);
void b_runOneCycle(struct task **taskArray, int numTask, int *ptCycle, struct resource **resourceArray, int numResourceType, int *blockQ, int sizeQ, int **max, int verboseFlag);
int b_canRequest(struct resource **resourceArray, int numResourceType, struct task **taskArray, int numTask, int **max, struct task *curTask, struct activity *curActivity);
void b_runRequest(struct task *curTask, struct activity *curActivity, struct resource **resourceArray, int verboseFlag);
void b_shiftBlockQ(int *blockQ, int sizeQ);
void b_addToQ(struct task *curTask, int *blockQ, int sizeQ);
void b_helperRelease(struct task *curTask, int numResourceType, struct resource **resourceArray);
void b_printOutput(struct task **taskArray, int numTask, int cycle);
int b_allTerminated(struct task **taskArray, int numTask);
void b_runRelease(struct task *curTask, struct activity *curActivity, struct resource **resourceArray, int *ptCycle, struct resource **tempResourceArray, int verboseFlag);
void b_pendingRelease(struct resource **resourceArray, int numResourceType, struct task **taskArray, int numTask, int **max, int *blockQ, int sizeQ, int verboseFlag);
